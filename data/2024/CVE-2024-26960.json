{
	"id": "CVE-2024-26960",
	"vulnerabilities": [
		{
			"content": {
				"id": "CVE-2024-26960",
				"description": "In the Linux kernel, the following vulnerability has been resolved:\n\nmm: swap: fix race between free_swap_and_cache() and swapoff()\n\nThere was previously a theoretical window where swapoff() could run and\nteardown a swap_info_struct while a call to free_swap_and_cache() was\nrunning in another thread.  This could cause, amongst other bad\npossibilities, swap_page_trans_huge_swapped() (called by\nfree_swap_and_cache()) to access the freed memory for swap_map.\n\nThis is a theoretical problem and I haven't been able to provoke it from a\ntest case.  But there has been agreement based on code review that this is\npossible (see link below).\n\nFix it by using get_swap_device()/put_swap_device(), which will stall\nswapoff().  There was an extra check in _swap_info_get() to confirm that\nthe swap entry was not free.  This isn't present in get_swap_device()\nbecause it doesn't make sense in general due to the race between getting\nthe reference and swapoff.  So I've added an equivalent check directly in\nfree_swap_and_cache().\n\nDetails of how to provoke one possible issue (thanks to David Hildenbrand\nfor deriving this):\n\n--8<-----\n\n__swap_entry_free() might be the last user and result in\n\"count == SWAP_HAS_CACHE\".\n\nswapoff->try_to_unuse() will stop as soon as soon as si->inuse_pages==0.\n\nSo the question is: could someone reclaim the folio and turn\nsi->inuse_pages==0, before we completed swap_page_trans_huge_swapped().\n\nImagine the following: 2 MiB folio in the swapcache. Only 2 subpages are\nstill references by swap entries.\n\nProcess 1 still references subpage 0 via swap entry.\nProcess 2 still references subpage 1 via swap entry.\n\nProcess 1 quits. Calls free_swap_and_cache().\n-> count == SWAP_HAS_CACHE\n[then, preempted in the hypervisor etc.]\n\nProcess 2 quits. Calls free_swap_and_cache().\n-> count == SWAP_HAS_CACHE\n\nProcess 2 goes ahead, passes swap_page_trans_huge_swapped(), and calls\n__try_to_reclaim_swap().\n\n__try_to_reclaim_swap()->folio_free_swap()->delete_from_swap_cache()->\nput_swap_folio()->free_swap_slot()->swapcache_free_entries()->\nswap_entry_free()->swap_range_free()->\n...\nWRITE_ONCE(si->inuse_pages, si->inuse_pages - nr_entries);\n\nWhat stops swapoff to succeed after process 2 reclaimed the swap cache\nbut before process1 finished its call to swap_page_trans_huge_swapped()?\n\n--8<-----",
				"severity": [
					{
						"type": "cvss_v31",
						"source": "134c704f-9b21-4f2e-91b3-4a467353bcc0",
						"cvss_v31": {
							"vector": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
							"base_score": 5.5,
							"base_severity": "MEDIUM",
							"temporal_score": 5.5,
							"temporal_severity": "MEDIUM",
							"environmental_score": 5.5,
							"environmental_severity": "MEDIUM"
						}
					}
				],
				"cwe": [
					{
						"source": "134c704f-9b21-4f2e-91b3-4a467353bcc0",
						"cwe": [
							"CWE-362"
						]
					}
				],
				"references": [
					{
						"source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
						"url": "https://git.kernel.org/stable/c/0f98f6d2fb5fad00f8299b84b85b6bc1b6d7d19a"
					},
					{
						"source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
						"url": "https://git.kernel.org/stable/c/1ede7f1d7eed1738d1b9333fd1e152ccb450b86a"
					},
					{
						"source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
						"url": "https://git.kernel.org/stable/c/2da5568ee222ce0541bfe446a07998f92ed1643e"
					},
					{
						"source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
						"url": "https://git.kernel.org/stable/c/363d17e7f7907c8e27a9e86968af0eaa2301787b"
					},
					{
						"source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
						"url": "https://git.kernel.org/stable/c/3ce4c4c653e4e478ecb15d3c88e690f12cbf6b39"
					},
					{
						"source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
						"url": "https://git.kernel.org/stable/c/82b1c07a0af603e3c47b906c8e991dc96f01688e"
					},
					{
						"source": "416baaa9-dc9f-4396-8d5f-8c081fb06d67",
						"url": "https://git.kernel.org/stable/c/d85c11c97ecf92d47a4b29e3faca714dc1f18d0d"
					},
					{
						"source": "af854a3a-2127-422b-91ae-364da2661108",
						"url": "https://git.kernel.org/stable/c/0f98f6d2fb5fad00f8299b84b85b6bc1b6d7d19a"
					},
					{
						"source": "af854a3a-2127-422b-91ae-364da2661108",
						"url": "https://git.kernel.org/stable/c/1ede7f1d7eed1738d1b9333fd1e152ccb450b86a"
					},
					{
						"source": "af854a3a-2127-422b-91ae-364da2661108",
						"url": "https://git.kernel.org/stable/c/2da5568ee222ce0541bfe446a07998f92ed1643e"
					},
					{
						"source": "af854a3a-2127-422b-91ae-364da2661108",
						"url": "https://git.kernel.org/stable/c/363d17e7f7907c8e27a9e86968af0eaa2301787b"
					},
					{
						"source": "af854a3a-2127-422b-91ae-364da2661108",
						"url": "https://git.kernel.org/stable/c/3ce4c4c653e4e478ecb15d3c88e690f12cbf6b39"
					},
					{
						"source": "af854a3a-2127-422b-91ae-364da2661108",
						"url": "https://git.kernel.org/stable/c/82b1c07a0af603e3c47b906c8e991dc96f01688e"
					},
					{
						"source": "af854a3a-2127-422b-91ae-364da2661108",
						"url": "https://git.kernel.org/stable/c/d85c11c97ecf92d47a4b29e3faca714dc1f18d0d"
					},
					{
						"source": "af854a3a-2127-422b-91ae-364da2661108",
						"url": "https://lists.debian.org/debian-lts-announce/2024/06/msg00017.html"
					},
					{
						"source": "nvd.nist.gov",
						"url": "https://nvd.nist.gov/vuln/detail/CVE-2024-26960"
					}
				],
				"published": "2024-05-01T06:15:12.323Z",
				"modified": "2024-11-21T09:03:29.657Z"
			},
			"segments": [
				{
					"ecosystem": "cpe"
				}
			]
		}
	],
	"data_source": {
		"id": "nvd-api-cve",
		"raws": [
			"vuls-data-raw-nvd-api-cve/2024/CVE-2024-26960.json"
		]
	}
}
